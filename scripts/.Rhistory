col2 = paste(stri_replace_all_regex(col2,"(  +)",""),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
teste = lapply(data,structPage)
cat(teste[[2]])
structPage = function(page){
col1 = stri_replace_all_regex(page,"(   +).*\\n","")
col2 = stri_extract_all_regex(page,"(   +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(   +)",""),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
teste = lapply(data,structPage)
cat(teste[[2]])
structPage = function(page){
col1 = stri_replace_all_regex(page,"(    +).*\\n","")
col2 = stri_extract_all_regex(page,"(    +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(    +)",""),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
teste = lapply(data,structPage)
cat(teste[[2]])
structPage = function(page){
col1 = stri_replace_all_regex(page,"(     +).*\\n","")
col2 = stri_extract_all_regex(page,"(     +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(     +)",""),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
teste = lapply(data,structPage)
cat(teste[[2]])
structPage = function(page){
col1 = stri_replace_all_regex(page,"(      +).*\\n","")
col2 = stri_extract_all_regex(page,"(      +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(      +)",""),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
teste = lapply(data,structPage)
cat(teste[[2]])
structPage = function(page){
col1 = stri_replace_all_regex(page,"(       +).*\\n","")
col2 = stri_extract_all_regex(page,"(       +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(       +)",""),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
teste = lapply(data,structPage)
cat(teste[[2]])
structPage = function(page){
col1 = stri_replace_all_regex(page,"(        +).*\\n","")
col2 = stri_extract_all_regex(page,"(        +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(        +)",""),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
teste = lapply(data,structPage)
cat(teste[[2]])
cat(teste[[1]])
cat(teste[[2]])
structPage = function(page){
col1 = stri_replace_all_regex(page,"(  +).*\\n","")
col2 = stri_extract_all_regex(page,"(  +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(  +)"," "),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
teste = lapply(data,structPage)
cat(teste[[2]])
structPage = function(page){
col1 = stri_replace_all_regex(page,"(   +).*\\n","")
col2 = stri_extract_all_regex(page,"(   +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(   +)"," "),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
teste = lapply(data,structPage)
cat(teste[[2]])
teste = sapply(data,structPage)
teste
teste = lapply(data,structPage)
teste
teste = unlist(lapply(data,structPage))
teste
teste = paste(teste,collapse = '\n')
cat(teste)
doc = pdf_text('~/Downloads/DJMT/outfile_p8-9.pdf')
structPage = function(page){
col1 = stri_replace_all_regex(page,"(   +).*\\n","")
col2 = stri_extract_all_regex(page,"(   +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(   +)"," "),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
doc = pdf_text('~/Downloads/DJMT/outfile_p8-9.pdf')
structPage = function(page){
col1 = stri_replace_all_regex(page,"(   +).*\\n","")
col2 = stri_extract_all_regex(page,"(   +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(   +)"," "),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
doc = unlist(lapply(doc,structPage))
doc = paste(doc,collapse = '\n')
doc
library(data.table)
library(stringi)
library(pdftools)
library(tm)
library(parallel)
library(doParallel)
library(tidytext)
library(dplyr)
structPage = function(page){
col1 = stri_replace_all_regex(page,"(   +).*\\n","")
col2 = stri_extract_all_regex(page,"(   +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(   +)"," "),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
readDocuments = function(file){
doc = pdf_text(file)
# Paste paragraphs together
doc = unlist(lapply(doc,structPage))
doc = paste(doc, collapse ="\n")
doc = strsplit(doc,"(Processo )?Número( Único)?: |Protocolo( Número\\/Ano)?: ", perl = T)[[1]]
# Paste the previous removed word clausula
if(length(doc) > 1){
doc[2:length(doc)] = paste0("CNJ: ",doc[2:length(doc)])
}
return(doc)
}
######################################################################################
# Read Files
######################################################################################
path = "~/Downloads/DJMT/"
filesName = list.files(path)
files = paste0(path,filesName)
ncores = detectCores() - 1
docs = mclapply(files, readDocuments, mc.cores = ncores)
diaries = lapply(docs, function(x) VCorpus(VectorSource(x)))
######################################################################################
# Creating Corpus and Initial Meta
######################################################################################
invisible(
lapply(seq_along(diaries), function(doc){
lapply(seq_along(diaries[[doc]]), function(idx){
meta(diaries[[doc]][[idx]], tag = "language") <<- "pt"
meta(diaries[[doc]][[idx]], tag = "origin") <<- filesName[doc]
})}))
doc.corpus = diaries[[1]]
invisible(
sapply(2:length(diaries), function(idx){
doc.corpus <<- c(doc.corpus,diaries[[idx]])
}))
rm(diaries)
invisible(gc())
######################################################################################
# Cleaning Corpus
######################################################################################
doc.corpus = tm_map(doc.corpus, content_transformer(stri_replace_all_regex)," +"," ")
claro.corpus = tm_filter(doc.corpus, FUN = function(x) any(grepl("CLARO S[.]?[ ]?A", x)))
invisible(
sapply(seq_along(claro.corpus), function(idx){
meta(claro.corpus[[idx]], tag = "CNJ") <<- stri_replace_all_regex(stri_replace_all_fixed(stri_extract_first_regex(content(claro.corpus[[idx]]),"CNJ: [ 0-9.\\/-]+"),"CNJ: ","")," +","")
meta(claro.corpus[[idx]], tag = "digitsCNJ") <<- nchar(stri_replace_all_regex(meta(claro.corpus[[idx]], tag = "CNJ"),"[[:punct:]]",""))
}))
data = tidy(claro.corpus)
data %>%
select(origin, CNJ) %>%
as.data.table
rm(list = ls())
library(data.table)
library(stringi)
library(pdftools)
library(tm)
library(parallel)
library(doParallel)
library(tidytext)
library(dplyr)
structPage = function(page){
col1 = stri_replace_all_regex(page,"(   +).*\\n","")
col2 = stri_extract_all_regex(page,"(   +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(   +)"," "),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
readDocuments = function(file){
doc = pdf_text(file)
# Paste paragraphs together
doc = unlist(lapply(doc,structPage))
doc = paste(doc, collapse ="\n")
doc = strsplit(doc,"(Processo )?Número( Único)?: |Protocolo( Número\\/Ano)?: ", perl = T)[[1]]
# Paste the previous removed word clausula
if(length(doc) > 1){
doc[2:length(doc)] = paste0("CNJ: ",doc[2:length(doc)])
}
return(doc)
}
######################################################################################
# Read Files
######################################################################################
path = "~/Downloads/DJMT/"
filesName = list.files(path)
files = paste0(path,filesName)
filesName
######################################################################################
# Read Files
######################################################################################
path = "~/Downloads/DJMT/DJ/"
filesName = list.files(path)
files = paste0(path,filesName)
files
ncores = detectCores() - 1
docs = mclapply(files, readDocuments, mc.cores = ncores)
diaries = lapply(docs, function(x) VCorpus(VectorSource(x)))
######################################################################################
# Creating Corpus and Initial Meta
######################################################################################
invisible(
lapply(seq_along(diaries), function(doc){
lapply(seq_along(diaries[[doc]]), function(idx){
meta(diaries[[doc]][[idx]], tag = "language") <<- "pt"
meta(diaries[[doc]][[idx]], tag = "origin") <<- filesName[doc]
})}))
doc.corpus = diaries[[1]]
invisible(
sapply(2:length(diaries), function(idx){
doc.corpus <<- c(doc.corpus,diaries[[idx]])
}))
rm(diaries)
invisible(gc())
doc.corpus
######################################################################################
# Cleaning Corpus
######################################################################################
doc.corpus = tm_map(doc.corpus, content_transformer(stri_replace_all_regex)," +"," ")
claro.corpus = tm_filter(doc.corpus, FUN = function(x) any(grepl("CLARO S[.]?[ ]?A", x)))
claro.corpus
doc.corpus
doc.corpus[[1]]
rm(list = ls())
library(data.table)
library(stringi)
library(pdftools)
library(tm)
library(parallel)
library(doParallel)
library(tidytext)
library(dplyr)
structPage = function(page){
col1 = stri_replace_all_regex(page,"(   +).*\\n","")
col2 = stri_extract_all_regex(page,"(   +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(   +)"," "),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
readDocuments = function(file){
doc = pdf_text(file)
# Paste paragraphs together
doc = unlist(lapply(doc,structPage))
doc = paste(doc, collapse ="\n")
doc = strsplit(doc,"(Processo )?Número( Único)?: |Protocolo( Número\\/Ano)?: ", perl = T)[[1]]
# Paste the previous removed word clausula
if(length(doc) > 1){
doc[2:length(doc)] = paste0("CNJ: ",doc[2:length(doc)])
}
return(doc)
}
######################################################################################
# Read Files
######################################################################################
path = "~/Downloads/DJMT/DJ/"
filesName = list.files(path)
files = paste0(path,filesName)
ncores = detectCores() - 1
docs = mclapply(files, readDocuments, mc.cores = ncores)
diaries = lapply(docs, function(x) VCorpus(VectorSource(x)))
######################################################################################
# Creating Corpus and Initial Meta
######################################################################################
invisible(
lapply(seq_along(diaries), function(doc){
lapply(seq_along(diaries[[doc]]), function(idx){
meta(diaries[[doc]][[idx]], tag = "language") <<- "pt"
meta(diaries[[doc]][[idx]], tag = "origin") <<- filesName[doc]
})}))
doc.corpus = diaries[[1]]
invisible(
sapply(2:length(diaries), function(idx){
doc.corpus <<- c(doc.corpus,diaries[[idx]])
}))
rm(diaries)
invisible(gc())
######################################################################################
# Cleaning Corpus
######################################################################################
doc.corpus = tm_map(doc.corpus, content_transformer(stri_replace_all_regex)," +"," ")
claro.corpus = tm_filter(doc.corpus, FUN = function(x) any(grepl("CLARO S[.]?[ ]?A", x)))
invisible(
sapply(seq_along(claro.corpus), function(idx){
meta(claro.corpus[[idx]], tag = "CNJ") <<- stri_replace_all_regex(stri_replace_all_fixed(stri_extract_first_regex(content(claro.corpus[[idx]]),"CNJ: [ 0-9.\\/-]+"),"CNJ: ","")," +","")
meta(claro.corpus[[idx]], tag = "digitsCNJ") <<- nchar(stri_replace_all_regex(meta(claro.corpus[[idx]], tag = "CNJ"),"[[:punct:]]",""))
}))
data = tidy(claro.corpus)
data %>%
select(origin, CNJ) %>%
as.data.table
# ncores = detectCores() - 1
# docs = mclapply(files, readDocuments, mc.cores = ncores)
docs = lapply(files, readDocuments)
######################################################################################
# Read Files
######################################################################################
path = "~/Downloads/DJMT/DJ/"
filesName = list.files(path)
filesName
filesName
filesName!='Original'
filesName = filesName!='Original'
filesName
filesName = list.files(path)
filesName = filesName[filesName!='Original']
filesName
files = paste0(path,filesName)
# ncores = detectCores() - 1
# docs = mclapply(files, readDocuments, mc.cores = ncores)
docs = lapply(files, readDocuments)
diaries = lapply(docs, function(x) VCorpus(VectorSource(x)))
invisible(
lapply(seq_along(diaries), function(doc){
lapply(seq_along(diaries[[doc]]), function(idx){
meta(diaries[[doc]][[idx]], tag = "language") <<- "pt"
meta(diaries[[doc]][[idx]], tag = "origin") <<- filesName[doc]
})}))
doc.corpus = diaries[[1]]
invisible(
sapply(2:length(diaries), function(idx){
doc.corpus <<- c(doc.corpus,diaries[[idx]])
}))
rm(diaries)
invisible(gc())
######################################################################################
# Cleaning Corpus
######################################################################################
doc.corpus = tm_map(doc.corpus, content_transformer(stri_replace_all_regex)," +"," ")
claro.corpus = tm_filter(doc.corpus, FUN = function(x) any(grepl("CLARO S[.]?[ ]?A", x)))
invisible(
sapply(seq_along(claro.corpus), function(idx){
meta(claro.corpus[[idx]], tag = "CNJ") <<- stri_replace_all_regex(stri_replace_all_fixed(stri_extract_first_regex(content(claro.corpus[[idx]]),"CNJ: [ 0-9.\\/-]+"),"CNJ: ","")," +","")
meta(claro.corpus[[idx]], tag = "digitsCNJ") <<- nchar(stri_replace_all_regex(meta(claro.corpus[[idx]], tag = "CNJ"),"[[:punct:]]",""))
}))
data = tidy(claro.corpus)
data %>%
select(origin, CNJ) %>%
as.data.table
######################################################################################
# Read Files
######################################################################################
path = "~/Downloads/DJMT/DJ/Original/"
filesName = list.files(path)
filesName = filesName[filesName!='Original']
filesName
files = paste0(path,filesName)
# ncores = detectCores() - 1
# docs = mclapply(files, readDocuments, mc.cores = ncores)
docs = lapply(files, readDocuments)
diaries = lapply(docs, function(x) VCorpus(VectorSource(x)))
######################################################################################
# Creating Corpus and Initial Meta
######################################################################################
invisible(
lapply(seq_along(diaries), function(doc){
lapply(seq_along(diaries[[doc]]), function(idx){
meta(diaries[[doc]][[idx]], tag = "language") <<- "pt"
meta(diaries[[doc]][[idx]], tag = "origin") <<- filesName[doc]
})}))
doc.corpus = diaries[[1]]
invisible(
sapply(2:length(diaries), function(idx){
doc.corpus <<- c(doc.corpus,diaries[[idx]])
}))
rm(diaries)
invisible(gc())
######################################################################################
# Cleaning Corpus
######################################################################################
doc.corpus = tm_map(doc.corpus, content_transformer(stri_replace_all_regex)," +"," ")
claro.corpus = tm_filter(doc.corpus, FUN = function(x) any(grepl("CLARO S[.]?[ ]?A", x)))
invisible(
sapply(seq_along(claro.corpus), function(idx){
meta(claro.corpus[[idx]], tag = "CNJ") <<- stri_replace_all_regex(stri_replace_all_fixed(stri_extract_first_regex(content(claro.corpus[[idx]]),"CNJ: [ 0-9.\\/-]+"),"CNJ: ","")," +","")
meta(claro.corpus[[idx]], tag = "digitsCNJ") <<- nchar(stri_replace_all_regex(meta(claro.corpus[[idx]], tag = "CNJ"),"[[:punct:]]",""))
}))
data = tidy(claro.corpus)
data %>%
select(origin, CNJ) %>%
as.data.table
######################################################################################
# Read Files
######################################################################################
path = "~/Downloads/DJMT/DJ/"
filesName = list.files(path)
filesName
rm(list = ls())
library(data.table)
library(stringi)
library(pdftools)
library(tm)
library(parallel)
library(doParallel)
library(tidytext)
library(dplyr)
structPage = function(page){
col1 = stri_replace_all_regex(page,"(   +).*\\n","")
col2 = stri_extract_all_regex(page,"(   +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(   +)"," "),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
readDocuments = function(file){
doc = pdf_text(file)
# Paste paragraphs together
doc = unlist(lapply(doc,structPage))
doc = paste(doc, collapse ="\n")
doc = strsplit(doc,"(Processo )?Número( Único)?: |Protocolo( Número\\/Ano)?: ", perl = T)[[1]]
# Paste the previous removed word clausula
if(length(doc) > 1){
doc[2:length(doc)] = paste0("CNJ: ",doc[2:length(doc)])
}
return(doc)
}
######################################################################################
# Read Files
######################################################################################
path = "~/Downloads/DJMT/DJ/"
filesName = list.files(path)
files = paste0(path,filesName)
ncores = detectCores() - 1
diaries = mclapply(files, readDocuments, mc.cores = ncores)
diaries = lapply(diaries, function(x) VCorpus(VectorSource(x)))
######################################################################################
# Creating Corpus and Initial Meta
######################################################################################
invisible(
lapply(seq_along(diaries), function(doc){
lapply(seq_along(diaries[[doc]]), function(idx){
meta(diaries[[doc]][[idx]], tag = "language") <<- "pt"
meta(diaries[[doc]][[idx]], tag = "origin") <<- filesName[doc]
})}))
doc.corpus = diaries[[1]]
invisible(
sapply(2:length(diaries), function(idx){
doc.corpus <<- c(doc.corpus,diaries[[idx]])
}))
rm(diaries)
invisible(gc())
######################################################################################
# Cleaning Corpus
######################################################################################
doc.corpus = tm_map(doc.corpus, content_transformer(stri_replace_all_regex)," +"," ")
claro.corpus = tm_filter(doc.corpus, FUN = function(x) any(grepl("CLARO S[.]?[ ]?A", x)))
invisible(
sapply(seq_along(claro.corpus), function(idx){
meta(claro.corpus[[idx]], tag = "CNJ") <<- stri_replace_all_regex(stri_replace_all_fixed(stri_extract_first_regex(content(claro.corpus[[idx]]),"CNJ: [ 0-9.\\/-]+"),"CNJ: ","")," +","")
meta(claro.corpus[[idx]], tag = "digitsCNJ") <<- nchar(stri_replace_all_regex(meta(claro.corpus[[idx]], tag = "CNJ"),"[[:punct:]]",""))
}))
data = tidy(claro.corpus)
data %>%
select(origin, CNJ) %>%
as.data.table
library(data.table)
library(stringi)
library(pdftools)
library(tm)
library(parallel)
library(doParallel)
library(tidytext)
library(dplyr)
dirname(rstudioapi::getSourceEditorContext()$path)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
structPage = function(page){
col1 = stri_replace_all_regex(page,"(   +).*\\n","")
col2 = stri_extract_all_regex(page,"(   +).*\\n")[[1]]
col2 = paste(stri_replace_all_regex(col2,"(   +)"," "),collapse = '')
text = paste(col1,col2,collapse = '\n\n')
return(text)
}
readDocuments = function(file){
doc = pdf_text(file)
# Paste paragraphs together
doc = unlist(lapply(doc,structPage))
doc = paste(doc, collapse ="\n")
doc = strsplit(doc,"(Processo )?Número( Único)?: |Protocolo( Número\\/Ano)?: ", perl = T)[[1]]
# Paste the previous removed word clausula
if(length(doc) > 1){
doc[2:length(doc)] = paste0("CNJ: ",doc[2:length(doc)])
}
return(doc)
}
######################################################################################
# Read Files
######################################################################################
path = "../DJ/"
filesName = list.files(path)
files = paste0(path,filesName)
filesName
files
ncores = detectCores() - 1
diaries = mclapply(files, readDocuments, mc.cores = ncores)
